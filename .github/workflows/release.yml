name: Publish

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      tag:
        description: 'tag name (semver without v-prefix)'
        required: true
        type: string

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  semver:
    runs-on: ubuntu-latest
    outputs:
      SEMVER: ${{ steps.semver.outputs.SEMVER }}
    steps:
      - uses: actions/github-script@v7
        id: semver
        with:
          script: |
            const tag = "${{ github.event.inputs.tag }}" || "${{ github.event.release.tag_name }}";
            console.log(`Tag: ${tag}`);
            const r = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/;
            if (!r.test(tag)) {
              core.setFailed(`Action failed with an invalid semver.`);
            }
            core.setOutput('SEMVER', tag);

  get-dependencies-version:
    runs-on: ubuntu-latest
    outputs:
      PG_TOKENIZER_VERSION: ${{ steps.get-dependencies-version.outputs.PG_TOKENIZER_VERSION }}
      VCHORD_VERSION: ${{ steps.get-dependencies-version.outputs.VCHORD_VERSION }}
    steps:
      - name: Get dependencies latest version
        id: get-dependencies-version
        run: |
          PG_TOKENIZER_VERSION=$(curl -sSL https://api.github.com/repos/tensorchord/pg_tokenizer.rs/releases/latest | jq -r '.tag_name')
          if [ "$PG_TOKENIZER_VERSION" == "null" ]; then
            echo "Failed to get PG_TOKENIZER_VERSION"
            exit 1
          else
            echo "PG_TOKENIZER_VERSION=$PG_TOKENIZER_VERSION" >> $GITHUB_OUTPUT
          fi

          VCHORD_VERSION=$(curl -sSL https://api.github.com/repos/tensorchord/vectorchord/releases/latest | jq -r '.tag_name')
          if [ "$VCHORD_VERSION" == "null" ]; then
            echo "Failed to get VCHORD_VERSION"
            exit 1
          else
            echo "VCHORD_VERSION=$VCHORD_VERSION" >> $GITHUB_OUTPUT
          fi

  build:
    needs: ["semver", "get-dependencies-version"]
    strategy:
      matrix:
        version: ["14", "15", "16", "17"]
        arch: ["x86_64", "aarch64"]
    runs-on: ${{ matrix.arch == 'x86_64' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}

    env:
      CARGO_TERM_COLOR: always
      RUST_BACKTRACE: 1
      RUSTFLAGS: "-Dwarnings"
      SEMVER: ${{ needs.semver.outputs.SEMVER }}
      VERSION: ${{ matrix.version }}
      POSTGRES_VERSION: ${{ matrix.version }}
      ARCH: ${{ matrix.arch }}
      PLATFORM: ${{ matrix.arch == 'x86_64' && 'amd64' || 'arm64' }}
      PG_TOKENIZER_VERSION: ${{ needs.get-dependencies-version.outputs.PG_TOKENIZER_VERSION }}

    steps:
      - uses: actions/checkout@v4
      - name: Set up Environment
        run: ./tools/setup.sh
      - name: Build
        run: ./tools/package.sh
      - name: Upload Artifacts
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release upload --clobber $SEMVER ./build/postgresql-${VERSION}-vchord-bm25_${SEMVER}-1_${PLATFORM}.deb
          gh release upload --clobber $SEMVER ./build/postgresql-${VERSION}-vchord-bm25_${SEMVER}_${ARCH}-linux-gnu.zip

  docker:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    needs: ["semver", "get-dependencies-version", "build"]
    strategy:
      matrix:
        version: ["14", "15", "16", "17"]
    env:
      SEMVER: ${{ needs.semver.outputs.SEMVER }}
      PG_TOKENIZER_VERSION: ${{ needs.get-dependencies-version.outputs.PG_TOKENIZER_VERSION }}
      VCHORD_VERSION: ${{ needs.get-dependencies-version.outputs.VCHORD_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          mkdir -p build
          for arch in amd64 arm64; do
            gh release download $SEMVER --pattern "postgresql-${{ matrix.version }}-vchord-bm25_${SEMVER}-1_${arch}.deb" --output ./build/postgresql-${{ matrix.version }}-vchord-bm25_${SEMVER}-1_${arch}.deb
          done
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_TOKEN }}
      - name: Login to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push binary release to Docker Registry
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: "linux/amd64,linux/arm64"
          file: ./docker/binary.Dockerfile
          tags: |
            tensorchord/vchord_bm25-binary:pg${{ matrix.version }}-v${{ env.SEMVER }}
            ghcr.io/tensorchord/vchord_bm25-binary:pg${{ matrix.version }}-v${{ env.SEMVER }}
          build-args: |
            PG_VERSION=${{ matrix.version }}
            SEMVER=${{ env.SEMVER }}
      - name: Push PostgreSQL release to Docker Registry
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: "linux/amd64,linux/arm64"
          file: ./docker/Dockerfile
          tags: |
            tensorchord/vchord_bm25-postgres:pg${{ matrix.version }}-v${{ env.SEMVER }}
            ghcr.io/tensorchord/vchord_bm25-postgres:pg${{ matrix.version }}-v${{ env.SEMVER }}
          build-args: |
            PG_VERSION=${{ matrix.version }}
            SEMVER=${{ env.SEMVER }}
            VCHORD_VERSION=${{ env.VCHORD_VERSION }}
            PG_TOKENIZER_VERSION=${{ env.PG_TOKENIZER_VERSION }}
